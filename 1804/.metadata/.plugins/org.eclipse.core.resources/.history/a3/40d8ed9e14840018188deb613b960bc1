package com.jt.manage.factory;

import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

import org.springframework.beans.factory.FactoryBean;
import org.springframework.core.io.Resource;

import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPoolConfig;

public class JedisClusterFactory implements FactoryBean<JedisCluster> {
	private JedisPoolConfig poolConfig;
	private String redisNodePredix;
	private Resource propertySource;

	public void setPoolConfig(JedisPoolConfig poolConfig) {
		this.poolConfig = poolConfig;
	}

	public void setRedisNodePredix(String redisNodePredix) {
		this.redisNodePredix = redisNodePredix;
	}

	public void setPropertySource(Resource propertySource) {
		this.propertySource = propertySource;
	}

	@Override
	public JedisCluster getObject() throws Exception {
		Set<HostAndPort> nodes = getNodes();
		JedisCluster jedisCluster = new JedisCluster(nodes, poolConfig);
		return jedisCluster;
	}

	@Override
	public Class<?> getObjectType() {
		return JedisCluster.class;
	}

	@Override
	public boolean isSingleton() {
		return true;
	}

	// 从redis.properties中获取节点数据
	private Set<HostAndPort> getNodes() {
		Set<HostAndPort> nodes = new HashSet<>();

		// 创建properties对象
		try {
			Properties properties = new Properties();
			properties.load(propertySource.getInputStream());
			for (Object key : properties.keySet()) {
				String redisKey=(String)key;
				if(!redisKey.startsWith(redisNodePredix)){
					//跳过这次循环进入下一次
					continue;
				}
				//Ip:端口
				String redisNode=properties.getProperty(redisKey);
				String[] node =redisNode.split(":");
				HostAndPort hostAndPort=new HostAndPort(node[0],Integer.parseInt(node[1]));
				nodes.add(hostAndPort);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return nodes;
	}
}
